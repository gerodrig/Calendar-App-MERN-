{"version":3,"sources":["types/types.js","reducers/calendarReducer.js","reducers/uiReducer.js","reducers/authReducer.js","reducers/rootReducer.js","store/store.js","helpers/fetch.js","helpers/pepareEvents.js","actions/event.js","actions/auth.js","hooks/useForm.js","components/auth/LoginScreen.js","components/auth/RegisterScreen.js","components/ui/Navbar.js","components/calendar/CalendarEvent.js","actions/ui.js","components/calendar/CalendarModal.js","helpers/calendar-messages-fr.js","components/ui/AddNewFab.js","components/ui/DeleteEventFab.js","components/calendar/CalendarScreen.js","router/PrivateRoute.js","router/PublicRoute.js","router/AppRouter.js","CalendarApp.js","index.js"],"names":["types","initialState","events","activeEvent","modalOpen","checking","rootReducer","combineReducers","ui","state","action","type","calendar","payload","map","e","id","filter","auth","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","baseUrl","process","fetchNoToken","endpoint","data","method","url","fetch","headers","body","JSON","stringify","fetchWithToken","token","localStorage","getItem","prepareEvents","event","start","moment","toDate","end","eventAddNew","eventClearActiveEvent","eventUpdated","eventDeleted","eventsLoaded","checkingFinish","login","user","logoutUser","useForm","useState","values","setValues","reset","handleInputChange","target","name","value","LoginScreen","dispatch","useDispatch","loginEmail","loginPassword","formLoginValues","handleLoginInputChange","className","onSubmit","email","password","preventDefault","a","response","json","ok","setItem","Date","getTime","uid","Swal","fire","icon","title","text","message","confirmButtonColor","placeholder","onChange","to","RegisterScreen","registerName","registerEmail","registerPassword","registerPassword2","formRegisterValues","handleRegisterInputChange","password2","style","color","Navbar","onSetLanguage","useSelector","isToggled","setToggled","useEffect","onClick","clear","CalendarEvent","uiOpenModal","customStyles","content","top","left","right","bottom","marginRight","transform","Modal","setAppElement","now","minutes","seconds","add","after","clone","initEvent","notes","_id","CalendarModal","lang","dateStart","setdateStart","dateEnd","setdateEnd","titleValid","setTitleValid","formValues","setformValues","closeModal","handleStartDateChange","handleEndDateChange","handleSubmitForm","momentStart","momentEnd","isSameOrAfter","trim","length","console","log","eventStartUpdate","getState","eventStartAddNew","isOpen","onRequestClose","closeTimeoutMS","overlayClassName","minDate","autoComplete","rows","locale","messages","allDay","previous","next","today","month","week","day","agenda","date","time","noEventsInRange","showMore","total","AddNewFab","DeleteEventFab","localizer","momentLocalizer","CalendarScreen","language","setLanguage","languageHandler","lastView","setLastView","onDoubleClick","onSelectEvent","onViewChange","onSelectSlot","eventStyleGetter","isSelected","backgroundColor","borderRadius","opacity","display","startAccessor","endAccessor","onDoubleClickEvent","onView","view","selectable","eventPropGetter","components","PrivateRoute","isAuthenticated","Component","component","rest","props","PublicRoute","AppRouter","exact","path","CalendarApp","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.044cb741.chunk.js","sourcesContent":["export const types = {\n    uiOpenModal: '[ui] Open modal',\n    uiCloseModal: '[ui] Close modal',\n\n    eventStartAddNew: '[events] Start add new',\n    eventSetActive: '[event] Set Active',\n    eventLogout: '[event] Logout clean',\n\n\n    eventAddNew: '[event] Add new',\n    eventClearActiveEvent: '[event] Clear active event',\n    eventUpdated: '[event] Event Updated',\n    eventDeleted: '[event] Event deleted',\n    eventLoaded: '[event] Event loaded',\n\n    authCheckingFinish: '[auth] Finish Checking login state',\n    authStartLogin: '[auth] Start login',\n    authLogin: '[auth] Login',\n    authStartRegister: '[auth] Start register',\n    authStartTokenRenew: '[auth] Start token renew',\n    authLogout: '[auth] Logout',\n}","import { types } from \"../types/types\";\n\n//EVENT Sample\n// {    \n//     id: \"assigned from database\"\n//     title: 'Birthday boss',\n//     start: moment().toDate(),\n//     end: moment().add(2, 'hours' ).toDate(),\n//     bgcolor: '#fafafa',\n//     notes: 'buy the present',\n//     user: {\n//         _id: '123',\n//         name: 'Gerardo'\n//     }\n// }\n\nconst initialState = {\n    events: [],\n    activeEvent: null\n};\n\nexport const calendarReducer = ( state = initialState, action ) => {\n    switch (action.type) {\n        case types.eventSetActive:\n            return {\n                ...state,\n                activeEvent: action.payload\n            }\n        case types.eventAddNew:\n            return {\n                ...state,\n                events: [\n                    ...state.events,\n                    action.payload\n                ]\n            }\n        case types.eventClearActiveEvent:\n            return {\n                ...state,\n                activeEvent: null\n            }\n        case types.eventUpdated:\n            return {\n                ...state,\n                events: state.events.map(\n                    e => ( e.id === action.payload.id ) ? action.payload : e\n                )\n            }\n        case types.eventDeleted:\n            return {\n                ...state,\n                events: state.events.filter(\n                    e => ( e.id !== state.activeEvent.id )\n                ),\n                activeEvent: null\n            }\n\n        case types.eventLoaded:\n            return {\n                ...state,\n                events: [ ...action.payload ]\n            }\n\n        case types.eventLogout:\n            return {\n                ...initialState\n            }\n    \n        default:\n            return state;\n    }\n}","import { types } from \"../types/types\";\n\n//this is the definition of the reducer for the modal\nconst initialState = {\n    modalOpen: false\n}\n\n\nexport const uiReducer = ( state = initialState, action )=> {\n\n    switch ( action.type ) {\n        case types.uiOpenModal:\n            \n            return {\n                ...state,\n                modalOpen: true\n            }\n        case types.uiCloseModal: \n\n            return {\n                ...state,\n                modalOpen: false\n            }\n        default:\n            return state;\n    }\n}","import { types } from \"../types/types\";\n\nconst initialState = {\n\tchecking: true,\n\t// uid: null,\n\t// name: null\n};\n\nexport const authReducer = (state = initialState, action) => {\n\tswitch (action.type) {\n\t\tcase types.authLogin:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t...action.payload,\n\t\t\t\tchecking: false,\n\t\t\t};\n\t\tcase types.authCheckingFinish:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tchecking: false,\n\t\t\t};\n\t\tcase types.authLogout:\n\t\t\treturn {\n\t\t\t\tchecking: false,\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n","//this reducer will be a collecionf of all combined reducers\n\nimport { combineReducers } from \"redux\";\nimport { calendarReducer } from \"./calendarReducer\";\nimport { uiReducer } from \"./uiReducer\";\nimport { authReducer } from \"./authReducer\";\n\n\n\nexport const rootReducer = combineReducers({\n    ui: uiReducer,\n    calendar: calendarReducer,\n    auth: authReducer\n    //TODO: CalendarReducer\n})","//create the store\n\nimport { applyMiddleware, compose, createStore } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { rootReducer } from \"../reducers/rootReducer\";\n\nconst composeEnhancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\n\nexport const store = createStore(\n    rootReducer,\n    composeEnhancers(\n        applyMiddleware( thunk )\n    )\n);","const baseUrl = process.env.REACT_APP_API_URL;\n\nconst fetchNoToken = (endpoint, data, method = \"GET\") => {\n\tconst url = `${baseUrl}/${endpoint}`; // localhost:8081/api/auth or herokuapp.com\n\n\tif (method === \"GET\") {\n\t\treturn fetch(url);\n\t} else {\n\t\treturn fetch(url, {\n\t\t\tmethod,\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t},\n\t\t\tbody: JSON.stringify(data),\n\t\t});\n\t}\n};\n\nconst fetchWithToken = (endpoint, data, method = \"GET\") => {\n\tconst url = `${baseUrl}/${endpoint}`; // localhost:8081/api/auth or herokuapp.com\n\tconst token = localStorage.getItem(\"token\") || \"\";\n\n\tif (method === \"GET\") {\n\t\treturn fetch(url, {\n\t\t\tmethod,\n\t\t\theaders: {\n\t\t\t\t\"x-token\": token,\n\t\t\t},\n\t\t});\n\t} else {\n\t\treturn fetch(url, {\n\t\t\tmethod,\n\t\t\theaders: {\n\t\t\t\t\"x-token\": token,\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t},\n\t\t\tbody: JSON.stringify(data),\n\t\t});\n\t};\n};\n\nexport { fetchNoToken, fetchWithToken };\n","import moment from 'moment';\n\nexport const prepareEvents = (events = []) => {\n    return events.map(event => {\n        return {\n            ...event,\n            start: moment(event.start).toDate(),\n            end: moment(event.end).toDate(),\n        }\n    });\n}\n","import Swal from 'sweetalert2';\n\nimport { fetchWithToken } from '../helpers/fetch';\nimport { prepareEvents } from '../helpers/pepareEvents';\nimport { types } from '../types/types';\n\nexport const eventStartAddNew = (event) => {\n\treturn async (dispatch, getState) => {\n\t\tconst { uid, name } = getState().auth;\n\n\t\ttry {\n\t\t\tconst response = await fetchWithToken(\"events\", event, \"POST\");\n\t\t\tconst body = await response.json();\n\n\t\t\tif (body.ok) {\n\t\t\t\tevent.id = body.event.id;\n\t\t\t\tevent.user = {\n\t\t\t\t\t_id: uid,\n\t\t\t\t\tname,\n\t\t\t\t};\n\t\t\t\tdispatch(eventAddNew(event));\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n};\n\nconst eventAddNew = (event) => ({\n\ttype: types.eventAddNew,\n\tpayload: event,\n});\n\nexport const eventSetActive = (event) => ({\n\ttype: types.eventSetActive,\n\tpayload: event,\n});\n\nexport const eventClearActiveEvent = () => ({\n\ttype: types.eventClearActiveEvent,\n});\n\nexport const eventStartUpdate = (event) => {\n\treturn async (dispatch ) => {\n\t\t\n\t\ttry {\n\t\t\tconst response = await fetchWithToken(`events/${event.id}`, event, \"PUT\");\n\t\t\tconst body = await response.json();\n\n\t\t\tif (body.ok) {\n\t\t\t\tdispatch(eventUpdated(event));\n\t\t\t} else {\n\t\t\t\tSwal.fire({\n\t\t\t\t\ticon: \"error\",\n\t\t\t\t\ttitle: \"Error\",\n\t\t\t\t\ttext: body.message,\n\t\t\t\t\tconfirmButtonColor: \"#0062cc\",\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n};\n\n\nconst eventUpdated = (event) => ({\n\ttype: types.eventUpdated,\n\tpayload: event,\n});\n\nexport const eventStartDelete = () => {\n\treturn async (dispatch, getState) => {\n\n\t\tconst { id } = getState().calendar.activeEvent;\n\n\t\ttry {\n\t\t\tconst response = await fetchWithToken(`events/${id}`, {}, 'DELETE');\n\t\t\tconst body = await response.json();\n\n\t\t\tif (body.ok) {\n\t\t\t\tdispatch(eventDeleted());\n\t\t\t} else {\n\t\t\t\tSwal.fire({\n\t\t\t\t\ticon: \"error\",\n\t\t\t\t\ttitle: \"Error\",\n\t\t\t\t\ttext: body.message,\n\t\t\t\t\tconfirmButtonColor: \"#0062cc\",\n\t\t\t\t});\n\t\t\t}\n\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n};\n\nconst eventDeleted = () => ({ type: types.eventDeleted });\n\nexport const eventStartLoading = () => {\n\treturn async (dispatch) => {\n\t\ttry {\n\t\t\tconst response = await fetchWithToken(\"events\");\n\t\t\tconst body = await response.json();\n\n\t\t\tconst events = prepareEvents(body.events);\n\n\t\t\tdispatch(eventsLoaded(events));\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n};\n\nconst eventsLoaded = (events) => ({\n\ttype: types.eventLoaded,\n\tpayload: events,\n});\n\nexport const eventLogout = () => ({\n\ttype: types.eventLogout,\n});","import { fetchNoToken, fetchWithToken } from \"../helpers/fetch\";\nimport { types } from \"../types/types\";\nimport Swal from \"sweetalert2\";\nimport { eventLogout } from \"./event\";\n\nexport const startLogin = (email, password) => {\n\treturn async (dispatch) => {\n\t\tconst response = await fetchNoToken(\n\t\t\t\"auth\",\n\t\t\t{ email, password },\n\t\t\t\"POST\"\n\t\t);\n\n\t\tconst body = await response.json();\n\n\t\tif (body.ok) {\n\t\t\tlocalStorage.setItem(\"token\", body.token);\n\t\t\tlocalStorage.setItem(\"token-init-date\", new Date().getTime());\n\n\t\t\tdispatch(\n\t\t\t\tlogin({\n\t\t\t\t\tuid: body.uid,\n\t\t\t\t\tname: body.name,\n\t\t\t\t})\n\t\t\t);\n\t\t} else {\n\t\t\tSwal.fire({\n\t\t\t\ticon: \"error\",\n\t\t\t\ttitle: \"Error\",\n\t\t\t\ttext: body.message,\n\t\t\t\tconfirmButtonColor: \"#0062cc\",\n\t\t\t});\n\t\t}\n\t};\n};\n\nexport const startRegister = (name, email, password, password2) => {\n\treturn async (dispatch) => {\n\t\tif (password !== password2) {\n\t\t\treturn Swal.fire({\n\t\t\t\ticon: \"error\",\n\t\t\t\ttitle: \"Error\",\n\t\t\t\ttext: \"Passwords do not match\",\n\t\t\t\tconfirmButtonColor: \"#0062cc\",\n\t\t\t});\n\t\t}\n\n\t\tconst response = await fetchNoToken(\n\t\t\t\"auth/new\",\n\t\t\t{ name, email, password },\n\t\t\t\"POST\"\n\t\t);\n\n\t\tconst body = await response.json();\n\n\t\tif (body.ok) {\n\t\t\tlocalStorage.setItem(\"token\", body.token);\n\t\t\tlocalStorage.setItem(\"token-init-date\", new Date().getTime());\n\n\t\t\tdispatch(\n\t\t\t\tlogin({\n\t\t\t\t\tuid: body.uid,\n\t\t\t\t\tname: body.name,\n\t\t\t\t})\n\t\t\t);\n\t\t} else {\n\t\t\tSwal.fire({\n\t\t\t\ticon: \"error\",\n\t\t\t\ttitle: \"Error\",\n\t\t\t\ttext: body.message,\n\t\t\t\tconfirmButtonColor: \"#0062cc\",\n\t\t\t});\n\t\t}\n\t};\n};\n\nexport const startChecking = () => {\n\treturn async (dispatch) => {\n\n\t\tconst response = await fetchWithToken(\"auth/renew\");\n\t\tconst body = await response.json();\n\n\t\tif (body.ok) {\n\n\t\t\tlocalStorage.setItem(\"token\", body.token);\n\t\t\tlocalStorage.setItem(\"token-init-date\", new Date().getTime());\n\n\t\t\tdispatch(\n\t\t\t\tlogin({\n\t\t\t\t\tuid: body.uid,\n\t\t\t\t\tname: body.name,\n\t\t\t\t})\n\t\t\t);\n\t\t} else {\n\t\t\tdispatch(checkingFinish());\n\t\t}\n\t};\n};\n\nexport const startLogout = () => {\n\treturn async (dispatch) => {\n\t\t\n\t\tlocalStorage.clear();\n\t\tdispatch(logoutUser());\n\t\tdispatch( eventLogout() );\n\n\t};\n};\n\nconst checkingFinish = () => ({ type: types.authCheckingFinish });\n\n\nconst login = (user) => ({\n\ttype: types.authLogin,\n\tpayload: user,\n});\n\nconst logoutUser = () => ({\n\ttype: types.authLogout,\n});\n\n","import { useState } from 'react';\n\nexport const useForm = ( initialState = {} ) => {\n\n    const [values, setValues] = useState(initialState);\n\n    const reset = () => {\n        setValues( initialState );\n    };\n\n    const handleInputChange = ({ target }) => {\n\n        setValues({\n            ...values,\n            [ target.name ]: target.value\n        });\n    };\n\n    return [ values, handleInputChange, reset ];\n}","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { startLogin } from \"../../actions/auth\";\nimport { useForm } from \"../../hooks/useForm\";\nimport \"./login.css\";\n\nexport const LoginScreen = () => {\n\tconst dispatch = useDispatch();\n\n\tconst [formLoginValues, handleLoginInputChange] = useForm({\n\t\tloginEmail: \"gerry@outlook.com\",\n\t\tloginPassword: \"123456\",\n\t});\n\n\tconst { loginEmail, loginPassword } = formLoginValues;\t\n\n\tconst handleLogin = (e) => {\n\t\te.preventDefault();\n\n\t\tdispatch(startLogin(loginEmail, loginPassword));\n\t};\n\n\treturn (\n\t\t<div className=\"container login-container\">\n\t\t\t<div className=\"row\">\n\t\t\t\t<div className=\"col-md-6 login-form-1\">\n\t\t\t\t\t<h3>Login</h3>\n\t\t\t\t\t<form onSubmit={handleLogin}>\n\t\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\t\t\tplaceholder=\"Email\"\n\t\t\t\t\t\t\t\tname=\"loginEmail\"\n\t\t\t\t\t\t\t\tvalue={loginEmail}\n\t\t\t\t\t\t\t\tonChange={handleLoginInputChange}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"form-group mt-3\">\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\t\t\tplaceholder=\"Password\"\n\t\t\t\t\t\t\t\tname=\"loginPassword\"\n\t\t\t\t\t\t\t\tvalue={loginPassword}\n\t\t\t\t\t\t\t\tonChange={handleLoginInputChange}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"form-group mt-3 d-flex justify-content-center\">\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\t\tclassName=\"btnSubmit\"\n\t\t\t\t\t\t\t\tvalue=\"Login\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\tto=\"/register\"\n\t\t\t\t\t\t\tclassName=\"link mt-3 d-flex justify-content-center\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tCreate new account\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n","import React from 'react'\nimport { useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom'\nimport { startRegister } from '../../actions/auth';\nimport { useForm } from '../../hooks/useForm';\n\nexport const RegisterScreen = () => {\n\n    const dispatch = useDispatch();\n\n    const [formRegisterValues, handleRegisterInputChange] = useForm({\n\t\tregisterName: \"Gerry\",\n\t\tregisterEmail: \"gerry@outlook.com\",\n\t\tregisterPassword: \"123456\",\n\t\tregisterPassword2: \"123456\",\n\t});\n\n\tconst { registerName, registerEmail, registerPassword, registerPassword2 } = formRegisterValues;\n\n    const handleRegister = (e) => {\n        e.preventDefault();\n\n\n        dispatch(startRegister(registerName, registerEmail, registerPassword, registerPassword2));\n    };\n\n\n    return (\n        <div className=\"container login-container\">\n            <div className=\"row\">\n                <div className=\"col-md-6 login-form-2\">\n                    <h3>Register</h3>\n                    <form onSubmit={ handleRegister }>\n                        <div className=\"form-group\">\n                            <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                placeholder=\"Name\"\n                                name=\"registerName\"\n                                value={registerName}\n                                onChange={handleRegisterInputChange}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <input\n                                type=\"email\"\n                                className=\"form-control mt-3\"\n                                placeholder=\"Email\"\n                                name=\"registerEmail\"\n                                value={registerEmail}\n                                onChange={handleRegisterInputChange}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <input\n                                type=\"password\"\n                                className=\"form-control mt-3\"\n                                placeholder=\"Password\"\n                                name=\"registerPassword\"\n                                value={registerPassword}\n                                onChange={handleRegisterInputChange}                                \n                            />\n                        </div>\n\n                        <div className=\"form-group mt-3\">\n                            <input\n                                type=\"password\"\n                                className=\"form-control\"\n                                placeholder=\"Re-enter password\" \n                                name=\"registerPassword2\"\n                                value={registerPassword2}\n                                onChange={handleRegisterInputChange}\n                            />\n                        </div>\n\n                        <div className=\"form-group mt-3 d-flex justify-content-center\">\n                            <input \n                                type=\"submit\" \n                                className=\"btnSubmit\" \n                                value=\"Create account\" />\n                        </div>\n                        <Link   to=\"/login\"\n                                className=\"link mt-3 d-flex justify-content-center\"\n                                style={ { color: '#fff' } }>\n                        Login\n                        </Link>\n                    </form>\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { startLogout } from \"../../actions/auth\";\n\nexport const Navbar = ({ onSetLanguage }) => {\n\tconst dispatch = useDispatch();\n\n\tconst { name } = useSelector((state) => state.auth);\n\n\tconst [isToggled, setToggled] = useState(\" FR\");\n\n\tconst toggleTrueFalse = () =>\n\t\tsetToggled(isToggled === \" EN\" ? \" FR\" : \" EN\");\n\n\tuseEffect(() => {\n\t\tonSetLanguage(isToggled);\n\t}, [isToggled, onSetLanguage]);\n\n\tconst logoutHandler = () => {\n\t\tdispatch(startLogout());\n\n\t};\n\n\treturn (\n\t\t<div className=\"navbar navbar-dark bg-primary mb-4\">\n\t\t\t<span className=\"navbar-brand ms-2\">{name}</span>\n\n\t\t\t<button className=\"btn btn-light ms-auto\" onClick={toggleTrueFalse}>\n\t\t\t\t<i className=\"fas fa-globe\"></i>\n\t\t\t\t<span>{isToggled}</span>\n\t\t\t</button>\n\n\t\t\t<button\n\t\t\t\tclassName=\"btn btn-danger ms-2 me-2\"\n\t\t\t\tonClick={logoutHandler}\n\t\t\t>\n\t\t\t\t<i className=\"fas fa-sign-out-alt\"></i>\n\t\t\t\t<span> Exit</span>\n\t\t\t</button>\n\t\t</div>\n\t);\n};\n","import React from 'react'\n\nexport const CalendarEvent = ( {event} ) => {\n\n    //console.log('Checate esta', event);\n\n    const { title, user } = event\n\n    return (\n        <div>\n            <strong>{ title }</strong>\n            <span>- { user.name }</span>\n        </div>\n    )\n}\n","import { types } from \"../types/types\";\n\nexport const uiOpenModal = () => ({\n    type: types.uiOpenModal\n});\n\nexport const uiCloseModal = () => ({\n    type: types.uiCloseModal\n});","import React, { useEffect, useState } from \"react\";\nimport Modal from \"react-modal\";\nimport \"./CalendarModal.css\";\nimport DateTimePicker from 'react-datetime-picker';\nimport moment from \"moment\";\nimport Swal from 'sweetalert2'\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { uiCloseModal } from \"../../actions/ui\";\nimport { eventClearActiveEvent, eventStartAddNew, eventStartUpdate } from \"../../actions/event\";\n\nconst customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n  },\n};\nModal.setAppElement(\"#root\");\n\nconst now = moment().minutes(0).seconds(0).add(1, 'hours'); \nconst after = now.clone().add(1, 'hours');\n\n//clean the form\nconst initEvent = {\n    title: '',\n    notes: '',\n    start: now.toDate(),\n    end: after.toDate(),\n    user: {\n                _id: '123',\n                name: 'Gerardo'\n            }\n}\n\nexport const CalendarModal = ({ lang }) => {\n\n    //import the dispatch to pass the function\n    const dispatch = useDispatch();\n\n    //the use selector will help us be pending on something from the store\n    const { modalOpen } = useSelector( state => state.ui );\n    const { activeEvent } = useSelector( state => state.calendar );\n    \n    //state of my start date and end date\n    const [ dateStart, setdateStart ] = useState( now.toDate() );\n    const [ dateEnd, setdateEnd ] = useState( after.toDate() );\n    const [titleValid, setTitleValid] = useState(true);\n\n    //initial state of the form\n    const [formValues, setformValues] = useState( initEvent );\n\n    //Destructure notes and title from the formValues\n    const { notes, title, start, end } =  formValues;\n\n    //use effect that will keep track of our active notes so it event can be filled when double clicked\n    useEffect(() => {\n        //if active event exists we will send the values of that to the form\n        if(activeEvent){\n            setformValues( activeEvent );\n        } else {\n            setformValues( initEvent );\n        }\n        \n    }, [activeEvent, setformValues])\n\n    //update the statew when the input is entered in the form\n    const handleInputChange = ( { target } ) => {\n        \n        setformValues({\n            ...formValues,\n            [target.name]: target.value\n        })\n\n    }\n\n    //define the function when modal is closed\n    const closeModal = () => {\n        dispatch( uiCloseModal() );\n        dispatch( eventClearActiveEvent() );\n        setformValues( initEvent );\n    };\n\n    //update state when start date changes \n    const handleStartDateChange = ( e ) => {\n        setdateStart( e );\n        setformValues({\n            ...formValues,\n            start: e\n        })\n    }\n    \n    //update state when end date changes\n    const handleEndDateChange = ( e ) => {\n        setdateEnd( e );\n        setformValues({\n            ...formValues,\n            end: e\n        })\n    }\n\n    //form submiter\n    const handleSubmitForm = ( event ) => {\n        event.preventDefault();\n\n        //create a moment instance for my start and end values in form\n        const momentStart = moment( start );\n        const momentEnd = moment( end );\n\n        //check if end date is greater than start date\n        if( momentStart.isSameOrAfter( momentEnd ) ){\n            return Swal.fire('Error', 'End date must be greater than start date', 'error');            \n        }\n\n        //set for validity to false in case there is no title in the textbox\n        if( title.trim().length < 2 ){\n            return setTitleValid(false);\n        }\n\n        //execute persistence in database\n        //console.log(formValues);\n        if( activeEvent ) {\n            dispatch( eventStartUpdate( formValues) );\n        } else {\n            dispatch( eventStartAddNew( formValues ) );\n        }\n\n        //restore form validity\n        setTitleValid(true);\n        closeModal();\n\n    }\n\n    if( lang.trim() === 'EN'){\n        return (\n            <Modal\n            isOpen={ modalOpen }\n            // onAfterOpen={afterOpenModal}\n            onRequestClose={closeModal}\n            style={customStyles}\n            closeTimeoutMS={200}\n            className=\"modal\"\n            overlayClassName=\"modal-background\"\n            >\n                <h1> {( activeEvent ) ? 'Edit event' : 'New Event'} </h1>\n                <hr />\n                <form \n                    className=\"container\"\n                    onSubmit={ handleSubmitForm }>\n                    <div className=\"form-group\">\n                        <label>Date and start time</label>\n                        <DateTimePicker\n                            onChange={ handleStartDateChange }\n                            value={ dateStart }\n                            className=\"form-control\"\n                        />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label>Date and end time</label>\n                        <DateTimePicker\n                            onChange={ handleEndDateChange }\n                            value={ dateEnd }\n                            minDate={ dateStart }\n                            className=\"form-control\"\n                        />                 \n                    </div>\n\n                    <hr />\n                    <div className=\"form-group\">\n                        <label>Title and notes</label>\n                        <input\n                            type=\"text\"\n                            className={ `form-control ${ !titleValid && 'is-invalid' }`}\n                            placeholder=\"Event name\"\n                            name=\"title\"\n                            autoComplete=\"off\"\n                            value={ title }\n                            onChange={ handleInputChange }\n                        />\n                        <small id=\"emailHelp\" className=\"form-text text-muted\">\n                            Short description\n                        </small>\n                    </div>\n\n                    <div className=\"form-group\">\n                        <textarea\n                            type=\"text\"\n                            className=\"form-control\"\n                            placeholder=\"Notes\"\n                            rows=\"5\"\n                            name=\"notes\"\n                            value={ notes }\n                            onChange={ handleInputChange }\n                        ></textarea>\n                        <small id=\"emailHelp\" className=\"form-text text-muted\">\n                            Additional information\n                        </small>\n                    </div>\n\n                    <button type=\"submit\" className=\"btn btn-outline-primary w-100 mt-5\">\n                        <i className=\"far fa-save\"></i>\n                        <span> Save</span>\n                    </button>\n                </form>\n            </Modal>\n        );\n    }\n    else {\n        return (\n            <Modal\n            isOpen={ modalOpen }\n            // onAfterOpen={afterOpenModal}\n            onRequestClose={closeModal}\n            style={customStyles}\n            closeTimeoutMS={200}\n            className=\"modal\"\n            overlayClassName=\"modal-background\"\n            >\n                <h1> {( activeEvent ) ? `Modifier l'événement` : 'Nouvel évènement' } </h1>\n                <hr />\n                <form \n                    className=\"container\"\n                    onSubmit={ handleSubmitForm }>\n                    <div className=\"form-group\">\n                        <label>Date et heure de début</label>\n                        <DateTimePicker\n                            onChange={ handleStartDateChange }\n                            value={ dateStart }\n                            className=\"form-control\"\n                            locale='fr-ca'\n                        />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label>Date et heure de fin</label>\n                        <DateTimePicker\n                            onChange={ handleEndDateChange }\n                            value={ dateEnd }\n                            minDate={ dateStart }\n                            className=\"form-control\"\n                            locale='fr-ca'\n                        />                 \n                    </div>\n\n                    <hr />\n                    <div className=\"form-group\">\n                        <label>Titre et notes</label>\n                        <input\n                            type=\"text\"\n                            className={ `form-control ${ !titleValid && 'is-invalid' }`}\n                            placeholder=\"Nom de l'événement\"\n                            name=\"title\"\n                            autoComplete=\"off\"\n                            value={ title }\n                            onChange={ handleInputChange }\n                        />\n                        <small id=\"emailHelp\" className=\"form-text text-muted\">\n                            Brève description\n                        </small>\n                    </div>\n\n                    <div className=\"form-group\">\n                        <textarea\n                            type=\"text\"\n                            className=\"form-control\"\n                            placeholder=\"Remarques\"\n                            rows=\"5\"\n                            name=\"notes\"\n                            value={ notes }\n                            onChange={ handleInputChange }\n                        ></textarea>\n                        <small id=\"emailHelp\" className=\"form-text text-muted\">\n                            Informations Complémentaires\n                        </small>\n                    </div>\n\n                    <button type=\"submit\" className=\"btn btn-outline-primary w-100 mt-5\">\n                        <i className=\"far fa-save\"></i>\n                        <span> Enregistrer</span>\n                    </button>\n                </form>\n            </Modal>\n        );\n    }\n};\n","export const messages = {\n    allDay: 'toute la journée',\n    previous: '<',\n    next: '>',\n    today: 'aujourd\\'hui',\n    month: 'mois',\n    week: 'la semaine',\n    day: 'journée',\n    agenda: 'ordre du jour',\n    date: 'Date',\n    time: 'temps',\n    event: 'un événement',\n    noEventsInRange: 'Aucun événement à portée',\n    showMore: total => `+ Montre plus (${total})`\n};","import React from 'react'\nimport { useDispatch } from 'react-redux';\nimport { uiOpenModal } from '../../actions/ui';\n\n//fab = floating action button\nexport const AddNewFab = () => {\n\n    const dispatch = useDispatch();\n\n    const handleClickNew = () => {\n        dispatch( uiOpenModal() );\n    }\n\n    return (\n        <button className=\"btn btn-primary fab\"\n                onClick={ handleClickNew }>\n            <i className=\"fas fa-plus\"></i>\n            \n        </button>\n    )\n}\n","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { eventStartDelete } from '../../actions/event';\n\nexport const DeleteEventFab = ({lang}) => {\n\n     //import the dispatch so we can trigger actions\n    const dispatch = useDispatch();\n\n    let message = ' Delete Event'\n\n    if(lang.trim() !== 'EN'){\n        message = ` supprimer l'événement`\n    }\n\n    const handleDelete = () => {\n\n        dispatch( eventStartDelete() );\n\n    }\n\n    return (\n        <button\n            className='btn btn-danger fab-danger'\n            onClick={ handleDelete }>\n\n            <i className=\"fas fa-trash\"></i>\n            <span>{ message }</span>\n        </button>\n    )\n}\n","import React, { useEffect, useState } from 'react';\nimport { Navbar } from '../ui/Navbar';\n\nimport { Calendar as BigCalendar, momentLocalizer } from 'react-big-calendar';\nimport moment from 'moment';\n//for french\nimport 'moment/locale/fr-ca';\n\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\nimport { CalendarEvent } from './CalendarEvent';\nimport { CalendarModal } from './CalendarModal';\n//for french\nimport { messages } from '../../helpers/calendar-messages-fr';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { uiOpenModal } from '../../actions/ui';\nimport { eventClearActiveEvent, eventSetActive, eventStartLoading } from '../../actions/event';\nimport { AddNewFab } from '../ui/AddNewFab';\nimport { DeleteEventFab } from '../ui/DeleteEventFab';\n\n\nlet localizer = momentLocalizer(moment); // or globalizeLocalizer\n\n\n// const events = [{\n//     title: 'Birthday boss',\n//     start: moment().toDate(),\n//     end: moment().add(2, 'hours' ).toDate(),\n//     bgcolor: '#fafafa',\n//     user: {\n//         _id: '123',\n//         name: 'Gerardo'\n//     }\n// }]\n\nexport const CalendarScreen = () => {\n    \n    //import the dispatch so we can trigger actions\n    const dispatch = useDispatch();\n\n    //read from the store the events\n    const { events, activeEvent } = useSelector( state => state.calendar );\n\n    //read the uid form the store\n    const { uid } = useSelector( state => state.auth );\n\n\n    //define the current language\n    const [language, setLanguage] = useState(' FR');\n    //console.log(language);\n\n    const languageHandler = (lang) => {\n\n        if( lang === ' EN'){\n            return setLanguage(' FR');\n        }\n\n        return setLanguage(' EN');\n    }\n\n    //define current state to save the view\n    const [lastView, setLastView] = useState( localStorage.getItem('lastView') || 'month');\n\n    //load events\n    useEffect(() => {\n        \n        dispatch( eventStartLoading() )\n\n    }, [dispatch]);\n\n    const onDoubleClick =  (e) => {\n        dispatch( uiOpenModal() );\n    }\n\n    const onSelectEvent = (e) => {\n        dispatch( eventSetActive( e ) );\n    }\n\n    const onViewChange = (e) => {\n        //every time we change views the events triggers where we are located Month,Week,day,Agenda\n        //console.log(e)\n        setLastView( e );\n        localStorage.setItem('lastView', e);\n    }\n\n    //You can implement that when user clicks anywhere in the calendar the modal can be opened and autofills the date where\n    // the cursonr was clicked\n    const onSelectSlot = (e) => {\n        dispatch( eventClearActiveEvent() );\n    }\n    \n    const eventStyleGetter = ( event, start, end, isSelected ) => { \n\n        const style = {\n            backgroundColor: ( uid === event.user._id ) ? '#367CF7' : '#EABFB9',\n            borderRadius: '0px',\n            opacity: 0.8,\n            display: 'block',\n            color: 'white'\n        }\n\n        return { style }\n\n    }\n\n    if( language === ' EN'){\n\n        moment.locale('en');\n        localizer = momentLocalizer(moment);\n        return (\n            <div className=\"calendar-screen\">\n                <Navbar onSetLanguage={languageHandler} />\n                {\n    \n                <BigCalendar\n                    localizer={ localizer }\n                    events={ events }\n                    startAccessor=\"start\"\n                    endAccessor=\"end\"\n                    onDoubleClickEvent={ onDoubleClick } \n                    onSelectEvent={ onSelectEvent }\n                    onView={ onViewChange }\n                    view={ lastView }\n                    //hide delete button when clicking on any part of the calendar\n                    onSelectSlot={ onSelectSlot }\n                    selectable={ true }\n                    //for french\n                    //messages={ messages }\n                    eventPropGetter={ eventStyleGetter }\n                    components={{\n                        event: CalendarEvent\n                    }}\n                />\n                }\n                <AddNewFab />\n\n                {\n                    (activeEvent) && <DeleteEventFab lang={ language }/>\n                }\n                \n                <CalendarModal lang={ language } />\n            </div>\n        )\n    } else {\n\n        moment.locale('fr-ca');\n        localizer = momentLocalizer(moment);\n\n        return (\n            <div className=\"calendar-screen\">\n                <Navbar onSetLanguage={languageHandler} />\n                {\n    \n                <BigCalendar\n                    localizer={ localizer }\n                    events={ events }\n                    startAccessor=\"start\"\n                    endAccessor=\"end\"\n                    onDoubleClickEvent={ onDoubleClick } \n                    onSelectEvent={ onSelectEvent }\n                    onView={ onViewChange }\n                    view={ lastView }\n                    //for french\n                    onSelectSlot={ onSelectSlot }\n                    selectable={ true }\n                    messages={ messages }\n                    eventPropGetter={ eventStyleGetter }\n                    components={{\n                        event: CalendarEvent\n                    }}\n                />\n                }\n                <AddNewFab />\n\n                {\n                    (activeEvent) && <DeleteEventFab lang={ language }/>\n                }\n\n                <CalendarModal lang={ language }  />\n            </div>\n        )\n    }\n    \n}\n","import React from \"react\";\nimport Proptypes from \"prop-types\";\n\nimport { Route, Redirect } from \"react-router-dom\";\n\nexport const PrivateRoute = ({\n\tisAuthenticated,\n\tcomponent: Component,\n\t...rest\n}) => {\n\treturn (\n\t\t<Route {...rest}\n\t\t\tcomponent=\n\t\t\t{(props) =>\n\t\t\t\tisAuthenticated ? <Component {...props} /> : <Redirect to=\"/login\" />\n\t\t\t}\n\t\t/>\n\t)\n};\n\nPrivateRoute.propTypes = {\n\tisAuthenticated: Proptypes.bool.isRequired,\n\tcomponent: Proptypes.func.isRequired,\n};\n","import React from \"react\";\nimport Proptypes from \"prop-types\";\n\nimport { Route, Redirect } from \"react-router-dom\";\n\nexport const PublicRoute = ({\n\tisAuthenticated,\n\tcomponent: Component,\n\t...rest\n}) => {\n\treturn (\n\t\t<Route {...rest}\n\t\t\tcomponent=\n\t\t\t{(props) =>\n\t\t\t\tisAuthenticated ? (<Redirect to=\"/\" />) : (<Component {...props} />)\n\t\t\t}\n\t\t/>\n\t);\n};\n\nPublicRoute.propTypes = {\n    isAuthenticated: Proptypes.bool.isRequired,\n    component: Proptypes.func.isRequired\n};\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { \n    BrowserRouter as Router,\n    Switch,\n    Redirect,\n    // Link this is not required for now\n} from 'react-router-dom';\nimport { startChecking } from '../actions/auth';\n\nimport { LoginScreen } from '../components/auth/LoginScreen';\nimport { RegisterScreen } from '../components/auth/RegisterScreen';\nimport { CalendarScreen } from '../components/calendar/CalendarScreen';\nimport { PrivateRoute } from './PrivateRoute';\nimport { PublicRoute } from './PublicRoute';\n\nexport const AppRouter = () => {\n\n    const dispatch = useDispatch();\n\n    const { checking, uid } = useSelector( state => state.auth );\n\n    useEffect(() => {\n        \n        dispatch( startChecking() );\n\n    }, [dispatch]);\n\n    if( checking ){\n        return <h5>Please Wait...</h5>\n    }\n\n    return (\n        <Router>\n            <div>\n                <Switch>\n\n                    <PublicRoute\n                        exact path=\"/login\" \n                        component={ LoginScreen }\n                        isAuthenticated={ !!uid }                        \n                        />\n                    <PublicRoute \n                        exact path=\"/register\" \n                        component={ RegisterScreen }\n                        isAuthenticated={ !!uid } \n                        />\n\n                    <PrivateRoute \n                        exact path=\"/\" \n                        component={ CalendarScreen }\n                        isAuthenticated={ !!uid } \n                        />\n\n                    <Redirect to=\"/\" />\n\n                </Switch>\n            </div>\n        </Router>\n    )\n}\n","import React from 'react';\nimport { Provider } from 'react-redux';\n\nimport { store } from './store/store';\nimport { AppRouter } from './router/AppRouter';\n\n\nexport const CalendarApp = () => {\n    return (\n        <Provider store={ store }>\n            <AppRouter />\n        </Provider>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { CalendarApp } from './CalendarApp';\n\n//import the global styles for our calendar\nimport './styles.css';\n\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <CalendarApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}